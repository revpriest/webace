CURRENTLY:

  * JS is sending through GET, even for good browsers
  * CSRF hashes are insecure
  * Session data is used so can't scale properly

PLAN:
  * Rebuild CSRF to use our own cookies, and multiple random hashes in the DB 
  * Turn JS POST back on, it'll be ignoring Php Sess ID after that.


* Bloody IE!
  * Having faked enough of the IE stuff to get it to
    actually send messages, we realize the crux of the
    IE problem: CSRF was all bolloxed in the first place.
    * Current system uses php sessions, which are bad, mkay,
      coz they won't work once you go past a single headed
      setup. Scaling up to a dozen Apache boxes? Not if
      you use php sessions you aint. Not without fiddling
      at any rate.
    * So we need to rewrite the CSRF system, which means
      storing CSRF tokens in the DB, attached to a cookie.
    * CREATE TABLE IF NOT EXISTS `emailhash` (
         `cookie` varchar(64) NOT NULL,
         `csrf` varchar(64) NOT NULL,
         `created` datetime NOT NULL,
         PRIMARY KEY (`cookie`)
       ) ENGINE=MyISAM  DEFAULT CHARSET=latin1;
    * Override the initCsrfValidatior:
      * get rightHash from DB based on OUR session cookie!
      * Change 'identical' to 'is any one of these that are less than two minutes old' or some such.
    * Override initCsrfToken:
      * Remove session stuff.
    * Override generateHash:
      * generate random and store that hash in the DB as well as $this->setValue();
     



Things to do later:
* Private chat.
  * 
* Add auto-post-to-email
* Add auto-post-to-twitter
* Add auto-post-to-facebook
* Add avatar for those with certain nicks??
* Spam filters, inevitably, eventually.
* User-lists: view all stuff by this list of users
* View all stuff by top-rated?
  * Implies some rating stuff
* Clean up "commands" stuff, it needs a proper parser
  most likely, certainly at least each case calling a
  different function.
* Make a version that will allow a website owner
  to embed something so ve, and only ve (or ver
  minions) can reply in one-on-one chats with
  visitors? Probably a paid b2b service I guess?
  * Can already direct WebAce to post to a given URL.
    * Force it to lock into mode 1, and lock to a random non-url URL.
    * Need a way to make the messages private to all but Webmaster and Minions
    * Yeah, comes after, and using, some kinda Private Chat function.


